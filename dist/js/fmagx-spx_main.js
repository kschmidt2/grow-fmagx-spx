Highcharts.setOptions({lang:{thousandsSep:","}});let chartIdfmagx=document.getElementById("chart-container-fmagx-spx");function drawHighcharts(){Highcharts.chart(chartIdfmagx,{chart:{type:"line",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:5,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"192hNzULkzBWQmcH06QKhj52kafD7aXXZKMFDAo1V9KQ"},plotOptions:{series:{lineWidth:1,clip:!1,marker:{enabled:!1,symbol:"circle",fillColor:"#ffffff",states:{hover:{fillColor:"#ffffff"}}}}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,itemMarginTop:-10},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},min:0,formatter:function(){return Highcharts.numberFormat(this.value,0,".",",")}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueSuffix:"%",valueDecimals:2,shared:!0},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-8},tooltip:{enabled:!1}}}]}})}setTimeout(function(){if(""===chartIdfmagx.innerHTML){let e=document.getElementsByClassName("chart-area-fmagx-spx");for(var t=0;t<e.length;t++)e[t].style.display="none";document.getElementById("chart-fallback").innerHTML+='<img src="https://fm-static.cnbc.com/awsmedia/chart/2019/10/08/chart-error_wide.1570569331252.png" style="width: 100%;max-width:660px">'}},500),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiSGlnaGNoYXJ0cyIsInNldE9wdGlvbnMiLCJsYW5nIiwidGhvdXNhbmRzU2VwIiwiY2hhcnRJZGZtYWd4IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImRyYXdIaWdoY2hhcnRzIiwiY2hhcnQiLCJ0eXBlIiwic3R5bGVkTW9kZSIsInNwYWNpbmdCb3R0b20iLCJzcGFjaW5nUmlnaHQiLCJzcGFjaW5nTGVmdCIsInNwYWNpbmdUb3AiLCJ0aXRsZSIsInRleHQiLCJkYXRhIiwiZ29vZ2xlU3ByZWFkc2hlZXRLZXkiLCJwbG90T3B0aW9ucyIsInNlcmllcyIsImxpbmVXaWR0aCIsImNsaXAiLCJtYXJrZXIiLCJlbmFibGVkIiwic3ltYm9sIiwiZmlsbENvbG9yIiwic3RhdGVzIiwiaG92ZXIiLCJsZWdlbmQiLCJhbGlnbiIsInN5bWJvbFJhZGl1cyIsInZlcnRpY2FsQWxpZ24iLCJ4IiwiaXRlbU1hcmdpblRvcCIsInhBeGlzIiwibGFiZWxzIiwic3R5bGUiLCJ3aGl0ZVNwYWNlIiwidGlja0xlbmd0aCIsInlBeGlzIiwidXNlSFRNTCIsIm92ZXJmbG93IiwibWluIiwiZm9ybWF0dGVyIiwibnVtYmVyRm9ybWF0IiwidGhpcyIsInZhbHVlIiwiY3JlZGl0cyIsInRvb2x0aXAiLCJzaGFkb3ciLCJwYWRkaW5nIiwidmFsdWVTdWZmaXgiLCJ2YWx1ZURlY2ltYWxzIiwic2hhcmVkIiwicmVzcG9uc2l2ZSIsInJ1bGVzIiwiY29uZGl0aW9uIiwibWF4V2lkdGgiLCJjaGFydE9wdGlvbnMiLCJzZXRUaW1lb3V0IiwiaW5uZXJIVE1MIiwiY2hhcnRBcmVhIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImkiLCJsZW5ndGgiLCJkaXNwbGF5IiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJBQVFBQSxXQUFBQyxXQUFBLENBQ0FDLEtBQUEsQ0FDQUMsYUFBQSxPQUlBLElBQUFDLGFBQUFDLFNBQUFDLGVBQUEsNkJBaUJBLFNBQUFDLGlCQUNBUCxXQUFBUSxNQUFBSixhQUFBLENBQ0FJLE1BQUEsQ0FDQUMsS0FBQSxPQUNBQyxZQUFBLEVBQ0FDLGNBQUEsR0FDQUMsYUFBQSxJQUNBQyxZQUFBLEVBQ0FDLFdBQUEsSUFFQUMsTUFBQSxDQUNBQyxLQUFBLE1BRUFDLEtBQUEsQ0FDQUMscUJBQUEsZ0RBU0FDLFlBQUEsQ0FDQUMsT0FBQSxDQUNBQyxVQUFBLEVBQ0FDLE1BQUEsRUFDQUMsT0FBQSxDQUNBQyxTQUFBLEVBQ0FDLE9BQUEsU0FDQUMsVUFBQSxVQUNBQyxPQUFBLENBQ0FDLE1BQUEsQ0FDQUYsVUFBQSxlQU1BRyxPQUFBLENBQ0FDLE1BQUEsUUFDQUMsYUFBQSxFQUNBQyxjQUFBLE1BQ0FDLEVBQUEsR0FDQUMsZUFBQSxJQUVBQyxNQUFBLENBQ0FDLE9BQUEsQ0FDQUMsTUFBQSxDQUNBQyxXQUFBLFdBR0FDLFdBQUEsR0FPQUMsTUFBQSxDQUNBekIsT0FBQSxFQUNBcUIsT0FBQSxDQUNBSyxTQUFBLEVBQ0FDLFNBQUEsU0FFQUMsSUFBQSxFQUVBQyxVQUFBLFdBQ0EsT0FBQTVDLFdBQUE2QyxhQUFBQyxLQUFBQyxNQUFBLEVBQUEsSUFBQSxPQUdBQyxRQUFBLENBQ0F4QixTQUFBLEdBRUF5QixRQUFBLENBQ0FDLFFBQUEsRUFDQUMsUUFBQSxHQUNBQyxZQUFBLElBQ0FDLGNBQUEsRUFDQUMsUUFBQSxHQUVBQyxXQUFBLENBQ0FDLE1BQUEsQ0FBQSxDQUNBQyxVQUFBLENBQ0FDLFNBQUEsS0FFQUMsYUFBQSxDQUNBbkQsTUFBQSxDQUNBSSxhQUFBLElBRUFpQixPQUFBLENBQ0FDLE1BQUEsT0FDQUcsR0FBQSxHQUVBZ0IsUUFBQSxDQUNBekIsU0FBQSxTQTdHQW9DLFdBQUEsV0FDQSxHQUFBLEtBQUF4RCxhQUFBeUQsVUFBQSxDQUVBLElBQUFDLEVBQUF6RCxTQUFBMEQsdUJBQUEsd0JBQ0EsSUFBQSxJQUFBQyxFQUFBLEVBQUFBLEVBQUFGLEVBQUFHLE9BQUFELElBQ0FGLEVBQUFFLEdBQUEzQixNQUFBNkIsUUFBQSxPQUdBN0QsU0FBQUMsZUFBQSxrQkFBQXVELFdBQUEsNElBSUEsS0F5R0EsYUFBQXhELFNBQUE4RCxZQUFBLGdCQUFBOUQsU0FBQThELFdBQ0E1RCxpQkFFQUYsU0FBQStELGlCQUFBLG1CQUFBN0QiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGFkZHMgc29jaWFsIGNsYXNzIHRvIGdldCBzb2NpYWwgY2hhcnRcbi8vIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNoYXJ0LWFyZWFcIik7XG4vLyBmb3IodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5sZW5ndGg7IGkrKylcbi8vIHtcbi8vICAgICBlbGVtZW50W2ldLmNsYXNzTmFtZSArPSBcIiBzb2NpYWxcIjtcbi8vIH1cblxuXG5IaWdoY2hhcnRzLnNldE9wdGlvbnMoe1xuICAgIGxhbmc6IHtcbiAgICAgIHRob3VzYW5kc1NlcDogJywnXG4gICAgfVxufSk7XG5cbmxldCBjaGFydElkZm1hZ3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNoYXJ0LWNvbnRhaW5lci1mbWFneC1zcHhcIik7XG5cbi8vIGNoZWNrcyBmb3IgdGhlIGNoYXJ0IElEIGFuZCBkaXNwbGF5cyBhIGJhY2t1cCBpbWFnZSBpZiB0aGUgYnJvd3NlciBjYW4ndCBmaW5kIGl0XG5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGlmKGNoYXJ0SWRmbWFneC5pbm5lckhUTUwgPT09IFwiXCIpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ25vSWQnKTtcbiAgICAgICAgbGV0IGNoYXJ0QXJlYSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjaGFydC1hcmVhLWZtYWd4LXNweFwiKTtcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNoYXJ0QXJlYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY2hhcnRBcmVhW2ldLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfSBcbiAgICAgICAgLy8gaW5zZXJ0IGNoYXJ0IHNjcmVlbnNob3QgaGVyZVxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNoYXJ0LWZhbGxiYWNrXCIpLmlubmVySFRNTCArPSAnPGltZyBzcmM9XCJodHRwczovL2ZtLXN0YXRpYy5jbmJjLmNvbS9hd3NtZWRpYS9jaGFydC8yMDE5LzEwLzA4L2NoYXJ0LWVycm9yX3dpZGUuMTU3MDU2OTMzMTI1Mi5wbmdcIiBzdHlsZT1cIndpZHRoOiAxMDAlO21heC13aWR0aDo2NjBweFwiPic7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3llc0lkJylcbiAgICB9XG59LDUwMCk7XG5cbmZ1bmN0aW9uIGRyYXdIaWdoY2hhcnRzKCkge1xuICAgIEhpZ2hjaGFydHMuY2hhcnQoY2hhcnRJZGZtYWd4LCB7XG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgICAgICBzdHlsZWRNb2RlOiB0cnVlLFxuICAgICAgICAgICAgc3BhY2luZ0JvdHRvbTogMjUsXG4gICAgICAgICAgICBzcGFjaW5nUmlnaHQ6IDEwMCxcbiAgICAgICAgICAgIHNwYWNpbmdMZWZ0OiA1LFxuICAgICAgICAgICAgc3BhY2luZ1RvcDogMjBcbiAgICAgICAgfSwgXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdvb2dsZVNwcmVhZHNoZWV0S2V5OiAnMTkyaE56VUxrekJXUW1jSDA2UUtoajUya2FmRDdhWFhaS01GREFvMVY5S1EnXG4gICAgICAgIH0sXG4gICAgICAgIC8vIGZvciBiYXIgY2hhcnRzIG9ubHlcbiAgICAgICAgLy8gcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgLy8gICAgIHNlcmllczoge1xuICAgICAgICAvLyAgICAgICAgIGdyb3VwUGFkZGluZzogMC4xXG4gICAgICAgIC8vICAgICB9IFxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBmb3IgbGluZSBjaGFydHMgb25seVxuICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgICAgIGNsaXA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sOiAnY2lyY2xlJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZmZmZmZmJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIGFsaWduOiAncmlnaHQnLFxuICAgICAgICAgICAgc3ltYm9sUmFkaXVzOiAwLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICAgICAgICB4OiAxMCxcbiAgICAgICAgICAgIGl0ZW1NYXJnaW5Ub3A6IC0xMFxuICAgICAgICB9LFxuICAgICAgICB4QXhpczoge1xuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGlja0xlbmd0aDogNSxcbiAgICAgICAgICAgIC8vIGVkaXRzIHhBeGlzIHRpY2tzXG4gICAgICAgICAgICAvLyBkYXRlVGltZUxhYmVsRm9ybWF0czoge1xuICAgICAgICAgICAgLy8gICAgIHdlZWs6ICclYi4gJWUnLFxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIC8vIHRpY2tJbnRlcnZhbDogMjQgKiAzNjAwICogMTAwMCAqIDdcbiAgICAgICAgfSxcbiAgICAgICAgeUF4aXM6IHtcbiAgICAgICAgICAgIHRpdGxlOiBmYWxzZSxcbiAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgIHVzZUhUTUw6IHRydWUsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdhbGxvdydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAvLyBhZGRzIGNvbW1hcyB0byB0aG91c2FuZHNcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBIaWdoY2hhcnRzLm51bWJlckZvcm1hdCh0aGlzLnZhbHVlLDAsJy4nLCcsJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBjcmVkaXRzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICBzaGFkb3c6IGZhbHNlLFxuICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICB2YWx1ZVN1ZmZpeDogJyUnLFxuICAgICAgICAgICAgdmFsdWVEZWNpbWFsczogMixcbiAgICAgICAgICAgIHNoYXJlZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zaXZlOiB7XG4gICAgICAgICAgICBydWxlczogW3tcbiAgICAgICAgICAgIGNvbmRpdGlvbjoge1xuICAgICAgICAgICAgICAgIG1heFdpZHRoOiA1MDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICB4OiAtOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnaW50ZXJhY3RpdmUnKSB7XG4gICAgZHJhd0hpZ2hjaGFydHMoKTtcbn0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZHJhd0hpZ2hjaGFydHMpO1xufSJdfQ==
